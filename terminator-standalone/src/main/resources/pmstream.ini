# Use for local laptop testing
mem.Xmx1g
mem.Xms1g
mem.Xmn512m       # the size of the heap for the young generation

jvm.XX:PermSize=64m     # [default = 64mb] Size of the Permanent Generation.
jvm.XX:MaxPermSize=64m  # [default = 64m] [5.0 and newer: 64 bit VMs are scaled 30% larger; 1.4 amd64: 96m; 1.3.1 -client: 32m.] Size of the Permgen.
jvm.XX:InitialCodeCacheSize=8m
jvm.XX:ReservedCodeCacheSize=48m
jvm.XX:MaxDirectMemorySize=8g

#
# Garbage Collector
#
jvm.XXXX:+UseParallelOldGC         # Use parallel garbage collection for the full collections. Enabling this option automatically sets -XX:+UseParallelGC.
jvm.XX:MaxGCPauseMillis=50   # Sets a target for the maximum GC pause time. This is a soft goal.

jvm.XX:SurvivorRatio=98   #38       # [default = 8] Ratio of eden/survivor space size. # 190
#jvm.verbose:gc
jvm.Xloggc:${LOG_DIR:-.}/gc.log         # Logs gc details (Overrides -verbose:gc).
jvm.XX:HeapDumpPath=/var/ericsson/tor/dumps          # Path to directory or filename for heap dump. Manageable.
# jvm.XX:+HeapDumpOnOutOfMemoryError     # Dump heap to file when java.lang.OutOfMemoryError is thrown. Manageable.
jvm.XX:+PrintGC
jvm.XX:+PrintGCDetails
#jvm.XX:+PrintGCTimeStamps
jvm.XX:+PrintGCDateStamps
# jvm.XX:+PrintGCApplicationStoppedTime     # Time Length of the collection pauses.
# jvm.XX:+PrintGCApplicationConcurrentTime  # Time the applications run between collection pauses.
# jvm.XX:+PrintAdaptiveSizePolicy
# jvm.XX:+PrintTLAB
jvm.XX:+PrintTenuringDistribution
jvm.XX:+UseGCLogFileRotation
jvm.XX:NumberOfGCLogFiles=5
jvm.XX:GCLogFileSize=20M

#
# Optimization options
#
jvm.XX:+AggressiveOpts                   # Turn on point performance compiler optimizations that are expected to be default in upcoming releases.
jvm.XX:+UseCompressedOops                # Enables the use of compressed pointers for optimized 64-bit performance with Java heap sizes less than 32gb.
jvm.XX:+UseFastAccessorMethods           # Use optimized versions of Get<Primitive>Field.
#jvm.XX:CompileThreshold=<n>             # [default = 10000] [-client: 1,500] Number of method invocations/branches before compiling.
#jvm.XX:LargePageSizeInBytes=<n[k|m]>    # [default = 4m] [amd64: 2m.] Sets the large page size used for the Java heap.
#jvm.XX:ReservedCodeCacheSize=<n[k|m]>   # Reserved code cache size (in bytes) - maximum code cache size. [amd64, and -server x86: 2048m;]
#jvm.XX:ThreadStackSize=<n>              # [default = 512] [Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.] Thread Stack Size (in Kbytes). (0 means use default stack size)
jvm.XX:+UseBiasedLocking                # [5.0: false] Enable biased locking.
#jvm.XX:+UseLargePages                   # Use large page memory.
#jvm.XX:+UseStringCache                  # Enables caching of commonly allocated strings.
#jvm.XX:AllocatePrefetchLines=<n>        # [Default values are 1 if the last allocated object was an instance and 3 if it was an array.]
                                                   # Number of cache lines to load after the last object allocation using prefetch instructions generated in JIT compiled code.
#jvm.XX:AllocatePrefetchStyle=<[0|1|2]>  # Generated code style for prefetch instructions.
                                                   #  0 - no prefetch instructions are generated,
                                                   #  1 - execute prefetch instructions after each allocation,
                                                   #  2 - use TLAB allocation watermark pointer to gate when prefetch instructions are executed.
#jvm.XX:+UseCompressedStrings            # Use a byte[] for Strings that can be represented as pure ASCII.
#jvm.XX:+OptimizeStringConcat            # Optimize String concatenation operations where possible.
#jvm.XX:+AlwaysPreTouch                  # Pre-touch the Java heap during JVM initialization.
                                                   # Every page of the heap is thus demand-zeroed during initialization rather than incrementally during application execution.
#jvm.XX:AllocatePrefetchDistance=<n>     # [varies] Sets the prefetch distance for object allocation.
                                                   # Memory about to be written with the value of new objects is prefetched into cache at this distance (in bytes)
                                                   # beyond the address of the last allocated object. Each Java thread has its own allocation point.
#jvm.XX:InlineSmallCode=<n>              # [varies] Inline a previously compiled method only if its generated native code size is less than this.
#jvm.XX:MaxInlineize=<n>                 # [default = 35] Maximum bytecode size of a method to be inlined.
#jvm.XX:FreqInlineSize=<n>               # [varies] Maximum bytecode size of a frequently executed method to be inlined.
#jvm.XX:LoopUnrollLimit=<n>              # [varies] Unroll loop bodies with server compiler intermediate representation node count less than this value.
# The limit used by the server compiler is a function of this value, not the actual value.
#jvm.XX:+TieredCompilation

#netty settings
arg.Dclient.buffer=256 
arg.DresourceReader.failOnError=true 
arg.Dio.netty.noPreferDirect=false             # Turn off direct buffers
arg.Dio.netty.noUnsafe=false                  # Turn off unsafe
arg.Dio.netty.noResourceLeakDetection=true    # Turn off the Automatic buffer leak detection
