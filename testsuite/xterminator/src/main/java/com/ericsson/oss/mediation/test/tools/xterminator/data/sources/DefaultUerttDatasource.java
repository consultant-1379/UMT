package com.ericsson.oss.mediation.test.tools.xterminator.data.sources;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;


public class DefaultUerttDatasource implements DataSource {

    public static final byte[] HEADER = new byte[] { 1, -100, 0, 1, 69, 44, 75, 50, 0, 70, 44, 74, 51, 0, 7, -36, 11, 9, 16, 52, 21, 83, 111, 117,
            116, 104, 45, 87, 101, 115, 116, 32, 101, 78, 111, 100, 101, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 97, 110,
            97, 103, 101, 100, 77, 111, 61, 109, 97, 110, 97, 103, 101, 100, 49, 44, 78, 111, 100, 101, 61, 110, 111, 100, 101, 51, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 16, 0, 0, 0, 0, 0, 0 };

    public static final byte[] ERROR = new byte[] { 1, -100, 0, 1, 69, 44, 75, 50, 0, 70, 44, 74, 51, 0, 7, -36, 11, 9, 16, 52, 21, 83, 111, 117,
            116, 104, 45, 87, 101, 115, 116, 32, 101, 78, 111, 100, 101, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 97, 110,
            97, 103, 101, 100, 77, 111, 61, 109, 97, 110, 97, 103, 101, 100, 49, 44, 78, 111, 100, 101, 61, 110, 111, 100, 101, 51, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 16, 0, 1, 0, 0, 0, 1 };

        private static final byte[] EVENT = new byte[] { 0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x08, 0x00, 0x0F, 0x10, 0x09, 0x18,
                0x04, 0x20, 0x0B, 0x28, 0x0C, 0x30, 0x1C, 0x38, 0x00, 0x01, 0x12, 0x00, 0x01, 0x0A, 0x00, 0x01, 0x0A, 0x03, 0x31, 0x2D, 0x31, 0x12, 0x03,
                0x43, 0x4D, 0x31, 0x1A, 0x19, 0x08, 0x00, 0x12, 0x15, 0x33, 0x47, 0x50, 0x50, 0x20, 0x54, 0x53, 0x20, 0x32, 0x35, 0x2E, 0x33, 0x33, 0x31,
                0x20, 0x56, 0x39, 0x2E, 0x32, 0x2E, 0x30, 0x1A, 0x14, 0x08, 0x01, 0x12, 0x10, 0x30, 0x2E, 0x34, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x32, 0x30,
                0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x1A, 0x14, 0x08, 0x02, 0x12, 0x10, 0x30, 0x2E, 0x34, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x32, 0x30, 0x2E,
                0x33, 0x2E, 0x30, 0x2E, 0x31, 0x1A, 0x14, 0x08, 0x04, 0x12, 0x10, 0x30, 0x2E, 0x34, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x32, 0x30, 0x2E, 0x33,
                0x2E, 0x31, 0x2E, 0x31, 0x1A, 0x04, 0x08, 0x05, 0x12, 0x00, 0x1A, 0x19, 0x08, 0x06, 0x12, 0x15, 0x33, 0x47, 0x50, 0x50, 0x20, 0x54, 0x53,
                0x20, 0x32, 0x35, 0x2E, 0x34, 0x35, 0x33, 0x20, 0x56, 0x37, 0x2E, 0x36, 0x2E, 0x30, 0x1A, 0x19, 0x08, 0x07, 0x12, 0x15, 0x33, 0x47, 0x50,
                0x50, 0x20, 0x54, 0x53, 0x20, 0x32, 0x35, 0x2E, 0x34, 0x31, 0x39, 0x20, 0x56, 0x36, 0x2E, 0x32, 0x2E, 0x30, 0x12, 0x15, 0x0A, 0x09, 0x20,
                0x0B, 0x28, 0x0C, 0x30, 0x1B, 0x38, 0x00, 0x05, 0x10, 0x00, 0x18, 0x08, 0x20, 0x00, 0x24, 0x28, 0x00, 0x4E, 0x1A, 0x10, 0x08, 0x00, 0x4E,
                0x12, 0x09, 0x20, 0x0B, 0x28, 0x0C, 0x30, 0x1B, 0x38, 0x00, 0x05, 0x20, 0x01, 0x22, 0x15, 0x0A, 0x09, 0x20, 0x0B, 0x28, 0x0C, 0x30, 0x1B,
                0x38, 0x00, 0x05, 0x12, 0x06, 0x52, 0x4E, 0x43, 0x32, 0x35, 0x32, 0x1A, 0x00, 0x1A, 0x24, 0x0A, 0x04, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00,
                0x00, 0x00, 0x2C, 0x18, 0x00, 0x03, 0x22, 0x14, 0x08, 0x00, 0x24, 0x10, 0x08, 0x22, 0x0D, 0x00, 0x18, 0x0A, 0x0A, 0x08, 0x24, 0x09, 0x01,
                0x10, 0x09, 0x00, 0x11, 0x00 };

    @Override
    public ByteBuf streamIndicator() {
        return Unpooled.buffer(HEADER.length).writeBytes(HEADER);
    }

    @Override
    public ByteBuf streamIndicators(final int count) {
        throw new UnsupportedOperationException();
    }

    /**
     * @return
     */
    @Override
    public ByteBuf event() {
        return Unpooled.buffer(EVENT.length).writeBytes(EVENT);
    }

    /**
     * @return
     */
    @Override
    public ByteBuf events(final int count) {
        final ByteBuf events = Unpooled.buffer(EVENT.length * count);
        for (int i = 0; i < count; i++) {
            events.writeBytes(event());
        }
        return events;
    }

    /**
     * @return
     */
    @Override
    public ByteBuf streamError() {
        return Unpooled.buffer(ERROR.length).writeBytes(ERROR);
    }

    /**
     * @return
     */
    @Override
    public ByteBuf streamErrors(final int count) {
        final ByteBuf events = Unpooled.buffer(ERROR.length * count);
        for (int i = 0; i < count; i++) {
            events.writeBytes(streamError());
        }
        return events;
    }
}
